{"/home/travis/build/npmtest/node-npmtest-inliner/test.js":"/* istanbul instrument in package npmtest_inliner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inliner/lib.npmtest_inliner.js":"/* istanbul instrument in package npmtest_inliner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_inliner = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_inliner = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-inliner/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-inliner && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_inliner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_inliner\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_inliner.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_inliner.rollup.js'] =\n            local.assetsDict['/assets.npmtest_inliner.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_inliner.__dirname + '/lib.npmtest_inliner.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/index.js":"module.exports = Inliner;\n\nvar debug = require('debug')('inliner');\nvar events = require('events');\nvar path = require('path');\nvar util = require('util');\nvar fs = require('then-fs');\nvar assign = require('lodash.assign');\nvar forEach = require('lodash.foreach');\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar findAssets = require('./find-assets');\nvar iconv = require('iconv-lite');\nvar charset = require('charset');\nvar jschardet = require('jschardet');\nvar querystring = require('querystring');\n\n// note: these tasks (excluding HTML), match up to files in lib/tasks/*.js\nvar tasks = {\n  html: 'html', // this is abritrary since it's manually processed\n  js: 'script',\n  svg: 'svg',\n  links: 'link[rel=stylesheet]',\n  favicon: 'link[rel=icon],link[rel=\"shortcut icon\"]',\n  styles: 'style',\n  'style-attrs': '[style]:not(svg *)',  // only style attrs in HTML, not SVG\n  images: 'img',\n  videos: 'video',\n};\nvar taskRunner = Object.keys(tasks).reduce(function (acc, curr) {\n  if (curr !== 'html') {\n    acc[curr] = require('./tasks/' + curr);\n  }\n  return acc;\n}, {});\n\n// source is typicaly a URL, but can be a file location OR an HTML string\nfunction Inliner(source, options, callback) {\n  var inliner = this;\n  events.EventEmitter.call(this);\n\n  // allow for source to be optional\n  if (typeof source !== 'string') {\n    callback = options;\n    options = source;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.url) {\n    this.url = options.url;\n  }\n\n  if (options.filename) {\n    this.filename = options.filename;\n  }\n\n  if (options.source) {\n    this.source = options.source;\n  } else {\n    this.source = source;\n  }\n\n  // this is an intentioal change. `.headers` is compatible with the request\n  // module, but -H and --header is compatible (i.e. the same as) cURL\n  if (options.header) {\n    options.headers = options.header;\n    delete options.header;\n  }\n\n  if (options.headers && !Array.isArray(options.headers)) {\n    options.headers = [options.headers];\n  }\n\n  if (options.headers && Array.isArray(options.headers)) {\n    options.headers = options.headers.reduce(function (acc, curr) {\n      if (typeof curr === 'string') {\n        var parts = curr.split(':').map(function (s) {\n          return s.trim();\n        });\n        acc[parts[0]] = parts[1];\n      } else {\n        var key = Object.keys(curr);\n        acc[key] = curr[key];\n      }\n      return acc;\n    }, {});\n  }\n\n  if (options.headers && typeof options.headers[0] === 'string') {\n    // convert to an object of key/value pairs\n    options.headers = options.headers.reduce(function (acc, curr) {\n      var pair = querystring.parse(curr);\n      var key = Object.keys(pair).shift();\n      acc[key] = pair[key];\n      return acc;\n    }, {});\n  }\n\n  this.headers = options.headers || {};\n\n  this.callback = function wrapper(error, res) {\n    // noop the callback once it's fired\n    inliner.callback = function noop() {\n      inliner.emit('error', 'callback fired again');\n    };\n\n    callback(error, res);\n  };\n  this.options = assign({}, Inliner.defaults(), options);\n  this.jobs = {\n    total: 0,\n    todo: 0,\n    tasks: tasks,\n    add: this.addJob.bind(this),\n    breakdown: {},\n    done: {},\n  };\n\n  Object.keys(this.jobs.tasks).forEach(function (key) {\n    this.jobs.breakdown[key] = 0;\n    this.jobs.done[key] = this.completeJob.bind(this, key);\n  }.bind(this));\n\n  this.isFile = options.useStdin || false;\n\n  this.on('error', function localErrorHandler(event) {\n    inliner.callback(event);\n  });\n\n  // this allows the user code to get the object back before\n  // it starts firing events\n  if (this.source) {\n    if (typeof setImmediate === 'undefined') {\n      global.setImmediate = function setImmediatePolyfill(fn) {\n        // :-/\n        setTimeout(fn, 0);\n      };\n    }\n    this.promise = new Promise(function (resolve) {\n      global.setImmediate(function () {\n        resolve(inliner.main());\n      });\n    });\n  } else {\n    this.promise = Promise.reject(new Error('No source to inline'));\n  }\n\n  return this;\n}\n\nutil.inherits(Inliner, events.EventEmitter);\nInliner.prototype.updateTodo = updateTodo;\nInliner.prototype.addJob = addJob;\nInliner.prototype.completeJob = completeJob;\nInliner.prototype.cssImages = require('./css').getImages;\nInliner.prototype.cssImports = require('./css').getImports;\nInliner.prototype.image = require('./image');\nInliner.prototype.uglify = require('./javascript');\nInliner.prototype.resolve = resolve;\nInliner.prototype.removeComments = removeComments;\nInliner.prototype.get = require('./get');\nInliner.prototype.main = main;\nInliner.prototype.findAssets = findAssets;\n\n// static properties and methods\nInliner.errors = require('./errors');\nInliner.defaults = require('./defaults');\n\n// main thread of functionality that does all the inlining\nfunction main() {\n  var inliner = this;\n  var url = this.source;\n\n  return fs.exists(this.filename || url)\n  .then(function exists(isFile) {\n    if (!isFile) {\n      throw new Error('Not a file - use URL parser');\n    }\n\n    debug('inlining file');\n\n    inliner.isFile = true;\n    inliner.url = url; // this is a hack for the `resolve` function later on\n    return inliner.get(this.filename || url, { encoding: 'binary' });\n  })\n  .catch(function isUrl() {\n    // make the best guess as to whether we're working with a url\n    if (inliner.url || url.indexOf('<') === -1) {\n      url = inliner.url || inliner.source;\n      // check for protocol on URL\n      if (url.indexOf('http') !== 0) {\n        url = 'http://' + url;\n      }\n\n      inliner.url = url;\n\n      debug('inlining url');\n      return inliner.get(url, { encoding: 'binary' });\n    }\n\n    // otherwise we're dealing with an inline string\n    debug('inlining by string: ', inliner.source);\n    inliner.isFile = true;\n    inliner.url = '.';\n    var res = {\n      body: new Buffer(inliner.source),\n      headers: {\n        'content-type': 'text/html',\n      },\n    };\n    return res;\n  })\n  .then(inliner.jobs.add('html'))\n  .then(function processHTML(res) {\n    inliner.jobs.done.html();\n    debug('processing HTML');\n\n    debug(inliner.options);\n\n    var body;\n    var cheerioLoadOptions = {};\n    var enc = inliner.options.encoding;\n\n    // try to determine the encoding from the headers and the body\n    if (!enc) {\n      enc = charset(res.headers, res.body);\n      enc = enc || jschardet.detect(res.body).encoding.toLowerCase();\n    }\n\n    // normalise to avoid any mistakes\n    if (enc === 'utf-8' || enc === 'utf8') {\n      enc = 'utf-8';\n    }\n\n    cheerioLoadOptions.decodeEntities = false;\n    if (enc !== 'utf-8') {\n      debug('decoding from: %s', enc);\n      body = iconv.encode(iconv.decode(res.body, enc), 'utf-8');\n    } else {\n      body = res.body;\n    }\n\n    body = body.toString();\n\n    // if we spot some SVG elements in the source,\n    // then we'll parse as XML to correctly get the SVG\n    if (body.indexOf('<?xml') !== -1 ||\n        body.indexOf('<?XML') !== -1) {\n      cheerioLoadOptions.xmlMode = true;\n    }\n\n    if (body.indexOf('<svg') !== -1) {\n      cheerioLoadOptions.lowerCaseAttributeNames = false;\n    }\n\n    var todo = inliner.findAssets(body, cheerioLoadOptions);\n    var $ = todo.$;\n    delete todo.$;\n\n    if (enc !== 'utf-8') {\n      // when transcoding remove any meta tags setting the charset\n      $('meta').each(function charMeta() {\n        var attrs = $(this).attr();\n        var content = attrs.content || '';\n        if (attrs.charset || content.toLowerCase().indexOf('charset=') !== -1) {\n          $(this).remove();\n        }\n      });\n    }\n\n    var promises = [];\n\n    forEach(todo, function forEach(todo, key) {\n      if (key === 'images' && !inliner.options.images) {\n        // skip images if the user doesn't want them\n        delete todo.images;\n        debug('skipping images');\n        return;\n      }\n\n      if (key === 'videos' && !inliner.options.videos) {\n        // skip videos if the user doesn't want them\n        delete todo.videos;\n        debug('skipping videos');\n        return;\n      }\n\n      if (!todo.length) {\n        return;\n      }\n\n      inliner.jobs.add(key, todo.length);\n\n      var tasks = taskRunner[key](inliner, todo.get(), $);\n      promises = promises.concat(tasks);\n    });\n\n    return Promise.all(promises).then(function then() {\n      var html = '';\n\n      // remove comments\n      if (!inliner.options.preserveComments) {\n        inliner.removeComments($(':root')[0], $);\n      }\n\n      // collapse the white space\n      if (inliner.options.collapseWhitespace) {\n        debug('collapsing whitespace');\n        $('pre, textarea').each(function () {\n          $(this).html($(this).html()\n              .replace(/\\n/g, '~~nl~~')\n              .replace(/\\s/g, '~~s~~'));\n        });\n\n        $('script').each(function () {\n          $(this).text($(this).text()\n              .replace(/\\n/g, '~~nl~~')\n              .replace(/\\s/g, '~~s~~'));\n        });\n\n        html = $.html()\n          .replace(/\\s+/g, ' ')\n          .replace(/~~nl~~/g, '\\n')\n          .replace(/~~s~~/g, ' ');\n      } else {\n        html = $.html();\n      }\n\n      debug('completed: %s bytes', html.length);\n\n      return html;\n    });\n\n  })\n  .then(function then(html) {\n    inliner.callback(null, html);\n    inliner.emit('end');\n  })\n  .catch(function errHandler(error) {\n    debug('fail', error.stack);\n    inliner.callback(error);\n    inliner.emit('error', error);\n    throw error;\n  });\n}\n\nfunction removeComments(element, $) {\n  if (!element || !element.childNodes) {\n    return;\n  }\n\n  var nodes = element.childNodes;\n  var i = nodes.length;\n\n  while (i--) {\n    var first = (nodes[i].nodeValue || '').charAt(0);\n    if (nodes[i].type === 'comment' && first !== '[' && first !== '#') {\n      $(nodes[i]).remove();\n    }\n    removeComments(nodes[i], $);\n  }\n}\n\nfunction resolve(from, to) {\n  if (!to) {\n    to = from;\n    from = this.url;\n  }\n\n  // don't resolve data urls (already inlined)\n  if (to.indexOf('data:') === 0) {\n    return to;\n  }\n\n  // always strip querystrings from requests off a local file\n  if (this.isFile) {\n    to = to.replace(/\\??#.*$/, '');\n  }\n\n  // don't resolve http(s) urls (no need to resolve)\n  if (to.indexOf('http:') === 0 || to.indexOf('https:') === 0) {\n    return to;\n  }\n\n  if (!this.isFile || from.indexOf('http') === 0) {\n    return require('url').resolve(from, to);\n  }\n\n  var base = path.dirname(from);\n  return path.resolve(base, to);\n}\n\nfunction updateTodo() {\n  var jobs = this.jobs;\n  jobs.todo = Object.keys(jobs.breakdown).reduce(function (acc, key) {\n    return acc + jobs.breakdown[key];\n  }, 0);\n\n  var breakdown = Object.keys(jobs.breakdown).map(function (key) {\n    if (jobs.breakdown[key]) {\n      return key + '(' + jobs.breakdown[key] + ')';\n    }\n    return false;\n  }).filter(Boolean);\n\n  this.emit('jobs', {\n    total: jobs.total,\n    todo: jobs.todo,\n    breakdown: breakdown,\n  });\n}\n\nfunction addJob(type) {\n  var n = typeof arguments[1] === 'number' ? arguments[1] : 1;\n  this.jobs.breakdown[type] += n;\n  this.jobs.total += n;\n  this.updateTodo();\n\n  debug('%s: %s', type, n);\n\n  // this allows me to include addJob as part of a promise chain\n  return arguments[1];\n}\n\nfunction completeJob(type) {\n  this.jobs.breakdown[type]--;\n  this.updateTodo();\n\n  // this allows me to include addJob as part of a promise chain\n  return arguments[1];\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/find-assets.js":"module.exports = findAssets;\n\nvar cheerio = require('cheerio');\nvar debug = require('debug')('inliner');\n\nfunction findAssets(html, cheerioLoadOptions) {\n  var $ = cheerio.load(html, cheerioLoadOptions);\n  debug('loaded DOM');\n\n  var tasks = this.jobs.tasks;\n  var res = Object.keys(tasks).reduce(function (acc, task) {\n    if (task === 'html') { // skip html task\n      return acc;\n    }\n\n    acc[task] = $(tasks[task]);\n\n    return acc;\n  }, {});\n\n  res.$ = $;\n\n  return res;\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/js.js":"module.exports = resolve;\n\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar debug = require('debug')('inliner');\nvar basename = require('path').basename;\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s scripts', todo.length);\n  return todo.map(function scripts(script) {\n    var $script = $(script);\n    var src = $script.attr('src');\n    var type = $script.attr('type');\n    var source = $script.text();\n\n    var promise;\n    var isMinified = false;\n\n    if (type && type.toLowerCase() !== 'text/javascript') {\n      debug('skipping %s', type);\n      return false;\n    }\n\n    // ext script\n    if (src) {\n      isMinified = src.indexOf('.min.') !== -1;\n      if (isMinified && !inliner.options.inlinemin) {\n        debug('skipping pre-minified script');\n        inliner.emit('progress', 'skipping minified script ' + basename(src));\n        inliner.jobs.done.js();\n        // ignore scripts with .min. in them - i.e. avoid minify\n        // scripts that are already minifed\n        return false;\n      } else if (src.indexOf('google-analytics') !== -1) {\n        debug('skipping analytics');\n        inliner.emit('progress', 'skipping analytics script');\n        inliner.jobs.done.js();\n        // ignore analytics\n        return false;\n      } else if (inliner.options.skipAbsoluteUrls &&\n                 (src.indexOf('//') === 0 || src.indexOf('http') === 0)) {\n        debug('skipping remote scripts');\n        inliner.emit('progress', 'skipping remote script');\n        return false;\n      }\n\n      $script.removeAttr('src');\n      var url = src;\n      if (url.indexOf('http') !== 0) {\n        url = inliner.resolve(inliner.url, url);\n      }\n\n      promise = inliner.get(url).then(function (data) {\n        debug('ret from inliner.get');\n        return data;\n      });\n    } else {\n      inliner.emit('progress', 'processing inline script');\n      promise = Promise.resolve({\n        body: source,\n      });\n    }\n\n    promise = promise.then(function then(res) {\n      if (res.body !== undefined) {\n        res = res.body;\n      }\n      // in case of local buffer\n      return res.toString();\n    });\n\n    if (inliner.options.compressJS && !isMinified) {\n      promise = promise.then(inliner.uglify.bind(inliner));\n    }\n\n    return promise.then(function then(res) {\n      // remove ETAGO (https://mathiasbynens.be/notes/etago)\n      res = res.replace(/<\\/script/gi, '<\\\\/script');\n      $script.text(res);\n    });\n  }).filter(Boolean);\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/svg.js":"module.exports = resolve;\n\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar debug = require('debug')('inliner');\nvar SVGO = require('svgo');\nvar svgo = new SVGO();\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s svg', todo.length, !!$);\n  return todo.map(function (svg) {\n    if (inliner.options.nosvg) {\n      return Promise.resolve();\n    }\n\n    return new Promise(function (resolve) {\n      var $svg = $(svg);\n      var source = $svg.html();\n\n      debug('optimising svg');\n\n      // reconstruct the SVG element outer tag\n      // console.log(Object.keys(svg.attribs).map(_ => `${_}=\"${svg.attribs[_]}\"`));\n      var top = '<svg ' + Object.keys(svg.attribs).map(function (key) {\n        return key + '=\"' + svg.attribs[key] + '\"';\n      }).join(' ') + '>';\n\n      source = top + source + '</svg>';\n\n      svgo.optimize(source, function (result) {\n        if (result.error) {\n          debug('svg failed', result.error);\n          return;\n        }\n        debug('optimisation complete');\n\n        $svg.replaceWith(result.data);\n      });\n\n      inliner.jobs.done.svg();\n\n      resolve();\n    });\n\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/links.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\nvar basename = require('path').basename;\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s links', todo.length);\n  return todo.map(function links(link) {\n    var url = $(link).attr('href');\n    if (inliner.options.skipAbsoluteUrls &&\n        (url.indexOf('//') === 0 || url.indexOf('http') === 0)) {\n      debug('skipping remote links');\n      inliner.emit('progress', 'skipping remote links');\n      return false;\n    }\n    if (url.indexOf('http') !== 0) {\n      url = inliner.resolve(inliner.url, url);\n    }\n    inliner.emit('progress', 'processing external css ' + basename(url));\n    return inliner.get(url).then(function then(res) {\n      var css = res.body;\n      inliner.jobs.done.links();\n      return inliner.cssImports(url, css)\n        .then(inliner.cssImages.bind(inliner, url));\n    }).then(function then(css) {\n      $(link).replaceWith('<style>' + css + '</style>');\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/favicon.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\nvar basename = require('path').basename;\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s favicon', todo.length);\n  return todo.map(function links(link) {\n    var url = $(link).attr('href');\n    url = inliner.resolve(inliner.url, url);\n    inliner.emit('progress', 'processing favicon ' + basename(url));\n    return inliner.image(url).then(function then(dataURL) {\n      $(link).attr('href', dataURL);\n    }).then(inliner.jobs.done.favicon);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/styles.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s styles', todo.length);\n  return todo.map(function links(style) {\n    var css = $(style).text();\n    inliner.emit('progress', 'processing inline css');\n    return inliner.cssImports(inliner.url, css)\n      .then(inliner.cssImages.bind(inliner, inliner.url))\n      .then(function then(css) {\n        $(style).text(css);\n        inliner.jobs.done.styles();\n      });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/style-attrs.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s style attributes', todo.length);\n  return todo.map(function links(style) {\n    var css = $(style).attr('style');\n    inliner.emit('progress', 'processing inline css');\n    return inliner.cssImports(inliner.url, css)\n      .then(inliner.cssImages.bind(inliner, inliner.url))\n      .then(function then(css) {\n        inliner.jobs.done['style-attrs']();\n        $(style).attr('style', css);\n      });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/images.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s links', todo.length);\n  return todo.map(function images(image) {\n    var url = $(image).attr('src');\n\n    if (inliner.options.skipAbsoluteUrls &&\n        (url.indexOf('//') === 0 || url.indexOf('http') === 0)) {\n      debug('skipping remote image');\n      inliner.emit('progress', 'skipping remote image');\n      return false;\n    }\n\n    url = inliner.resolve(inliner.url, url);\n    return inliner.image(url).then(function then(dataURL) {\n      $(image).attr('src', dataURL);\n    }).then(inliner.jobs.done.images);\n  });\n}\n\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/tasks/videos.js":"module.exports = resolve;\nvar debug = require('debug')('inliner');\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\n\nfunction resolve(inliner, todo, $) {\n  debug('start %s videos', todo.length);\n  return todo.map(function videos(video) {\n    var url = $(video).attr('src');\n    var posterUrl = $(video).attr('poster');\n    var promises = [];\n\n    if (inliner.options.skipAbsoluteUrls &&\n        (url.indexOf('//') === 0 || url.indexOf('http') === 0)) {\n      debug('skipping remote video');\n      inliner.emit('progress', 'skipping remote video');\n    } else {\n      debug('resolving local video');\n      url = inliner.resolve(inliner.url, url);\n      promises.push(inliner.image(url).then(function then(dataURL) {\n        $(video).attr('src', dataURL);\n      }));\n    }\n\n    if (inliner.options.skipAbsoluteUrls &&\n        (posterUrl.indexOf('//') === 0 || posterUrl.indexOf('http') === 0)) {\n      debug('skipping remote video');\n      inliner.emit('progress', 'skipping remote video');\n    } else {\n      debug('resolving local poster');\n      posterUrl = inliner.resolve(inliner.url, posterUrl);\n      promises.push(inliner.image(posterUrl).then(function then(dataURL) {\n        $(video).attr('poster', dataURL);\n      }));\n    }\n\n    if (!promises.length) {\n      return false;\n    }\n    return Promise.all(promises).then(inliner.jobs.done.videos);\n  });\n}\n\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/css.js":"var match = /url\\((?:['\"]*)(?!['\"]*data:)(.*?)(?:['\"]*)\\)/g;\n\nmodule.exports = {\n  getImages: getImages,\n  getImports: getImports,\n};\n\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar debug = require('debug')('inliner');\nvar basename = require('path').basename;\nvar CHARTSET_RE = /@charset\\s+[\"']([\\w\\-_]+)[\"'];/i;\nvar iconv = require('iconv-lite');\n\n\nfunction getImages(root, css) {\n  var inliner = this;\n\n  if (inliner.options.images === false) {\n    return css;\n  }\n\n  var singleURLMatch = /url\\(\\s*(['\"]*)(?!['\"]*data:)(.*?)(['\"]*)\\s*\\)/;\n  var matches = css.match(match) || [];\n  var images = matches.map(function eachURL(url) {\n    var match = url.match(singleURLMatch);\n    var source = match[2];\n    return {\n      source: match.input,\n      resolved: inliner.resolve(root, source),\n    };\n  });\n\n  debug('adding %s CSS assets', images.length);\n  inliner.jobs.add('images', images.length);\n\n  return Promise.all(images.map(function map(url) {\n    return inliner.image(url.resolved).then(function then(dataURL) {\n      inliner.jobs.done.images();\n      css = replace(css, url.source, 'url(\"' + dataURL + '\")');\n      return css;\n    });\n  })).then(function then() {\n    return css;\n  });\n}\n\nfunction replace(body, source, target) {\n  return body.split(source).join(target);\n}\n\nfunction getImports(root, css) {\n  css = convertCharset(css);\n  // change to a string in case the CSS is a buffer, which is the case\n  // when we're reading off the local file system\n  if (typeof css !== 'string') {\n    css = css.toString();\n  }\n  var position = css.indexOf('@import');\n  var inliner = this;\n\n  if (position !== -1) {\n    inliner.jobs.add('link', 1);\n    var match = (css.match(/@import(\\s*.*?);/) || [null, ''])[1];\n    var url = match.replace(/url/, '')\n      .replace(/['}\"()]/g, '')\n      .replace(/;/, '')\n      .trim()\n      .split(' '); // clean up\n\n    // if url has a length > 1, then we have media types to target\n    var resolvedURL = inliner.resolve(root, url[0]);\n    return inliner.get(resolvedURL).then(function then(res) {\n      var importedCSS = convertCharset(res.body);\n      inliner.jobs.done.links();\n      inliner.emit('progress', 'import ' + basename(resolvedURL));\n      if (url.length > 1) {\n        url.shift();\n        importedCSS = '@media ' + url.join(' ') + '{' + importedCSS + '}';\n      }\n\n      css = css.replace('@import' + match, importedCSS);\n      return getImports.call(inliner, root, css);\n    });\n  }\n\n  if (inliner.options.compressCSS) {\n    inliner.emit('progress', 'compress css');\n    css = compress(css);\n  }\n\n  return Promise.resolve(css);\n}\n\nfunction compress(css) {\n  return css\n    .replace(/\\s+/g, ' ')\n    .replace(/:\\s+/g, ':')\n    .replace(/\\/\\*.*?\\*\\//g, '')\n    .replace(/\\} /g, '}')\n    .replace(/ \\{/g, '{')\n    // .replace(/\\{ /g, '{')\n    .replace(/; /g, ';')\n    .replace(/\\n+/g, '');\n}\n\nfunction convertCharset(cssBody) {\n  var end = 0;\n  var maxLength = 64;\n  if (cssBody) {\n    end = cssBody.length > maxLength ? maxLength : cssBody.length;\n    var charsetData = cssBody.slice(0, end).toString();\n    var matchs = CHARTSET_RE.exec(charsetData);\n    if (matchs) {\n      var charset = matchs[1].toLowerCase();\n      if (charset && charset !== 'utf-8' && charset !== 'utf8') {\n        debug('decoding from: %s', charset);\n        if (iconv.encodingExists(charset)) {\n          return iconv.encode(iconv.decode(cssBody, charset), 'utf-8')\n            .toString()\n            .replace(CHARTSET_RE, '');\n        }\n        console.warn('no such charset: ' + charset);\n      }\n    }\n  }\n  return cssBody;\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/image.js":"module.exports = image;\n\nvar debug = require('debug')('inliner');\nvar mime = require('mime');\nvar SVGO = require('svgo');\nvar svgo = new SVGO();\nvar basename = require('path').basename;\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\n\nfunction image(url) {\n  url = url.replace(/\\??#.*$/, '');\n  var inliner = this;\n  this.emit('progress', 'get image ' + basename(url));\n  return this.get(url, { encoding: 'binary' }).then(function then(res) {\n    if (url.indexOf('data:') === 0) {\n      return url;\n    }\n\n    debug('image loaded: %s', url);\n\n    // if the url is SVG, let's compress and use the XML directly\n    if (res.body && mime.lookup(url) === 'image/svg+xml' &&\n      !inliner.options.nosvg) {\n      return new Promise(function (resolve, reject) {\n        svgo.optimize(res.body.toString(), function (result) {\n          debug('optimising svg');\n          if (result.error) {\n            debug('errored', result.error);\n            return reject(new Error(result.error));\n          }\n          var replacements = {\n            '<': '%3C',\n            '>': '%3E',\n            '\"': '%22',\n            '\\'': '%27',\n          };\n          var body = result.data.replace(/[\"'<>]/g, function (m) {\n            return replacements[m];\n          });\n          resolve('data:image/svg+xml;utf8,' + body);\n        });\n      });\n    }\n\n    // otherwise we base64 encode the image\n    return 'data:' + res.headers['content-type'] + ';base64,' +\n            new Buffer(res.body, 'binary').toString('base64');\n\n  }).catch(function errorHandle(error) {\n    debug('image %s failed to load', url, error);\n    throw error;\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/javascript.js":"module.exports = uglify;\n\nvar debug = require('debug')('inliner');\nvar UglifyJS = require('uglify-js');\n\nfunction uglify(source) {\n  var notIESafe = !this.options.iesafe;\n\n  this.emit('progress', 'compressing javascript');\n\n  source = source.trim();\n\n  if (source === '') {\n    this.jobs.done.js();\n    return '';\n  }\n\n  debug('uglifying %sbytes', source.length);\n\n  var result = '';\n\n  try {\n    result = UglifyJS.minify(source, {\n      fromString: true,\n      // must set screw_ie8 for each option group\n      // https://github.com/mishoo/UglifyJS2/issues/1204#issuecomment-234714094\n      // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      compress: { screw_ie8: notIESafe },\n      mangle: { screw_ie8: notIESafe },\n      output: { screw_ie8: notIESafe },\n      // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n    }).code;\n  } catch (e) {\n    // failed to uglify, just return it plain\n    result = source;\n  }\n\n  this.jobs.done.js();\n\n  return result;\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/get.js":"var request = require('request');\nvar assign = require('lodash.assign');\nvar debug = require('debug')('inliner');\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar fs = require('then-fs');\nvar mime = require('mime');\nvar basename = require('path').basename;\n\nvar cache = {};\n\nmodule.exports = function get(url, options) {\n  var inliner = this;\n  if (url.indexOf('data:') === 0) {\n    debug('asset already inline', url);\n    return Promise.resolve({\n      headers: {\n        'content-type': url.slice(5).replace(/;.*$/, ''),\n      },\n      body: url,\n    });\n  }\n\n  if (cache[url]) {\n    debug('request responding with cache');\n    return cache[url];\n  }\n\n  var base = basename(url);\n\n  this.emit('progress', 'loading ' + base);\n\n  if (this.isFile && url.indexOf('http') !== 0) {\n    debug('inliner.get file: %s', url);\n    cache[url] = fs.readFile(url).then(function read(body) {\n      return {\n        body: body,\n        headers: {\n          'content-type': mime.lookup(url),\n        },\n      };\n    }).catch(function (error) {\n      if (error.code === 'ENOENT') {\n        inliner.emit('warning', 'no such file: ' + base);\n      }\n\n      return {\n        body: '',\n        headers: {\n          'content-type': mime.lookup(url),\n        },\n      };\n    });\n\n    return cache[url];\n  }\n\n  debug('inliner.get url: %s', url);\n\n  var settings = assign({}, options, {\n    encoding: null,\n    followRedirect: true,\n    headers: inliner.headers,\n  });\n\n  debug('request %s', url, settings);\n\n  cache[url] = new Promise(function (resolve) {\n    request(encodeURI(url), settings, function response(error, res, body) {\n      if (error) {\n        debug('request failed: %s', error.message);\n        inliner.emit('warning', 'failed to request ' + base + ' (' +\n          error.message + ')');\n\n        body = '';\n        res = {\n          headers: {},\n        };\n      } else if (res.statusCode !== 200) {\n        inliner.emit('warning', res.statusCode + ' on ' + base);\n      }\n\n      debug('response: %s %s', res.statusCode, url);\n\n      if (res.statusCode >= 400) {\n        body = '';\n      }\n\n      resolve({\n        body: body,\n        headers: res.headers,\n        statusCode: res.statusCode,\n      });\n    });\n  });\n\n  return cache[url];\n};\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/errors.js":"module.exports = {\n  ENOTFOUND: 'The URL could not be loaded, possibly a typo, ' +\n    'or no internet connection',\n};","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/lib/defaults.js":"module.exports = function () {\n  return {\n    images: true,\n    compressCSS: true,\n    compressJS: true,\n    collapseWhitespace: true,\n    nosvg: false, // by default, DO compress SVG with SVGO\n    skipAbsoluteUrls: false,\n    preserveComments: false,\n    iesafe: false,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/cli/index.js":"#!/usr/bin/env node\n\nvar readFileSync = require('fs').readFileSync;\nvar Promise = require('es6-promise').Promise; // jshint ignore:line\nvar ansi = require('ansi-escapes');\n\nmain();\n\nfunction main() {\n  var argv = require('./options')(process.argv.slice(2));\n\n  if (argv.debug) {\n    require('debug').enable('inliner');\n  }\n\n  var url = argv._.shift();\n\n  if (argv.version) {\n    console.log(require('../package.json').version || 'development');\n    process.exit(0);\n  }\n\n  if ((!url && !argv.useStdin) || argv.help) {\n    var usage = readFileSync(\n      __dirname + '/../docs/usage.txt', 'utf8'\n    );\n    console.log(usage);\n    process.exit(0);\n  }\n\n  var Inliner = require('../');\n\n  var p = Promise.resolve(url);\n\n  if (argv.useStdin) {\n    p = new Promise(function (resolve) {\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n\n      var data = '';\n\n      process.stdin.on('data', function (chunk) {\n        data += chunk;\n      });\n\n      process.stdin.on('end', function () {\n        resolve(data);\n      });\n    });\n  }\n\n  var time = process.hrtime();\n  p.then(function (source) {\n    var inliner = new Inliner(source, argv, function result(error, html) {\n      if (error) {\n        var message = Inliner.errors[error.code] || error.message;\n        console.error(message);\n\n        if (argv.debug) {\n          console.error(error.stack);\n        }\n        process.exit(1);\n      }\n\n      console.log(html);\n    });\n\n    return inliner;\n  }).then(function (inliner) {\n    // checks for available update and returns an instance\n    // note: we're doing this after we kick off inliner, since there's a\n    // noticeable lag in boot because of it\n    var defaults = require('lodash.defaults');\n    var pkg = JSON.parse(readFileSync(__dirname + '/../package.json'));\n\n    require('update-notifier')({\n      pkg: defaults(pkg, { version: '0.0.0' }),\n    }).notify();\n\n    if (argv.verbose) {\n      var jobs = {};\n      var update = require('./progress');\n      var progress = '';\n\n      inliner.on('progress', function progressEvent(event) {\n        progress = event;\n        // console.log(JSON.stringify({ type: 'progress', progress, jobs }));\n        update(event, jobs, argv.debug);\n      });\n\n      inliner.on('jobs', function jobsEvent(event) {\n        jobs = event;\n        // console.log(JSON.stringify({ type: 'jobs', progress, jobs }));\n        update(progress, jobs, argv.debug);\n      });\n\n      inliner.on('warning', function warningEvent(event) {\n        progress = event;\n        // console.log(JSON.stringify({ type: 'warning', progress, jobs }));\n        update(event, jobs, true);\n      });\n\n      inliner.on('end', function () {\n        update.end(time);\n      });\n\n      'exit SIGINT SIGTERM'.split(' ').map(function (event) {\n        process.once(event, function () {\n          process.stderr.write(ansi.cursorShow); // put the cursor back\n          try { process.kill(process.pid, event); } catch (e) {}\n        });\n      });\n    } else {\n      inliner.on('warning', function progress(event) {\n        console.warn('warning: ' + event);\n      });\n    }\n  }).catch(function (error) {\n    console.error(error.stack);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/cli/options.js":"module.exports = options;\n\nvar minimist = require('minimist');\n\nfunction options(args) {\n  var argv = minimist(args, {\n    boolean: [ // flags\n      'version',\n      'help',\n      'debug',\n      'verbose',\n      'noimages',\n      'nocompress',\n      'nosvg',\n      'skip-absolute-urls',\n      'videos',\n      'inlinemin',\n      'preserve-comments',\n      'iesafe',\n    ],\n    string: [ // options\n      'encoding',\n    ],\n    alias: {\n      images: 'noimages', // legacy support\n      V: 'version',\n      h: 'help',\n      d: 'debug',\n      v: 'verbose',\n      i: 'noimages',\n      n: 'nocompress',\n      e: 'encoding',\n      s: 'nosvg',\n      o: 'videos',\n      m: 'inlinemin',\n      H: 'header',\n    },\n  });\n\n  // copy across specific options\n  if (argv.nocompress) {\n    argv.compressCSS = false;\n    argv.compressJS = false;\n    argv.collapseWhitespace = false;\n  }\n  if (argv['preserve-comments']) {\n    argv.preserveComments = true;\n  }\n\n  if (argv['skip-absolute-urls']) {\n    argv.skipAbsoluteUrls = true;\n  }\n  argv.images = !argv.noimages;\n\n  argv.useStdin = !process.stdin.isTTY;\n\n  argv.verbose = argv.verbose || !process.stdout.isTTY;\n\n  return argv;\n}\n","/home/travis/build/npmtest/node-npmtest-inliner/node_modules/inliner/cli/progress.js":"var styles = require('ansi-styles');\nvar ansi = require('ansi-escapes');\n\nconsole.warn(ansi.cursorHide + '\\n\\n' + ansi.cursorUp() +\n        ansi.cursorSavePosition);\n\nmodule.exports = function (progress, jobs, keep) {\n  if (keep) {\n    process.stderr.write(\n      ansi.cursorRestorePosition +\n      ansi.cursorLeft +\n      ansi.eraseLines(2) +\n      styles.red.open + '‣ ' + styles.red.close +\n      styles.gray.open + progress + styles.gray.close +\n      '\\n\\n' +\n      ansi.cursorSavePosition +\n      '\\n\\n'\n    );\n  }\n\n  var remaining = jobs.breakdown.join(', ');\n  if (remaining) {\n    remaining = ' remaining: ' + remaining;\n  }\n\n  var t = jobs.todo / jobs.total * 100;\n  if (t < 1) {\n    t = 0;\n  } else {\n    t = t | 0;\n  }\n\n  var str = styles.green.open +\n    (100 - t) + '%' +\n    styles.green.close +\n    remaining +\n    styles.gray.open +\n    '\\nLast job: ' + progress +\n    styles.gray.close;\n\n  process.stderr.write(\n    ansi.cursorRestorePosition +\n    ansi.cursorLeft +\n    ansi.eraseLines(2) +\n    str.trim() + '\\n');\n};\n\nmodule.exports.end = function (time) {\n  var diff = process.hrtime(time);\n  process.stderr.write(styles.green.open + 'Time: ' + diff[0] + 's ' +\n    (diff[1] / 1e6).toFixed(3) + 'ms\\n' + styles.green.close);\n  process.stderr.write(ansi.cursorShow);\n};\n\n// tidy up cursor\n'exit SIGINT SIGTERM'.split(' ').map(function (event) {\n  process.once(event, function () {\n    process.stderr.write(ansi.cursorShow); // put the cursor back\n    try { process.kill(process.pid, event); } catch (e) {}\n  });\n});\n"}